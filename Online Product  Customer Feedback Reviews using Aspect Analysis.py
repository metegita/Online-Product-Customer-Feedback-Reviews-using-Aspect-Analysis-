# -*- coding: utf-8 -*-
"""Online Product  Customer Feedback Reviews using A spect Analysis

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ox3QFOiIhqu5eKrnkVyXMRnpzJOmYUjP
"""

!pip install pandas spacy textblob
!python -m spacy download en_core_web_sm

!pip install spacy textblob matplotlib pandas
!python -m spacy download en_core_web_sm

import spacy
from textblob import TextBlob
import pandas as pd
import matplotlib.pyplot as plt
from collections import defaultdict

# Load spaCy model
nlp = spacy.load('en_core_web_sm')

def extract_aspects(review):
    """
    Extract aspects from the review using noun phrases.
    """
    doc = nlp(review)
    aspects = [chunk.text.lower() for chunk in doc.noun_chunks]
    return aspects

def analyze_sentiment(text):
    """
    Analyze the sentiment of the text using TextBlob.
    """
    blob = TextBlob(text)
    return blob.sentiment.polarity

# Sample reviews
reviews = [
    "The battery life of this phone is amazing but the camera quality is poor.",
    "I love the screen size and the ease of use, but the battery drains quickly.",
    "The camera is great, but the phone is too bulky.",
]

# Extract aspects and sentiment
aspect_sentiments = defaultdict(list)

for review in reviews:
    aspects = extract_aspects(review)
    sentiment = analyze_sentiment(review)

    for aspect in aspects:
        aspect_sentiments[aspect].append(sentiment)

# Average sentiment per aspect
aspect_sentiment_df = pd.DataFrame({
    'Aspect': [aspect for aspect in aspect_sentiments],
    'Average Sentiment': [sum(sentiments) / len(sentiments) for sentiments in aspect_sentiments.values()]
})

# Display results
print(aspect_sentiment_df)

def plot_aspect_sentiments(df):
    """
    Plot the average sentiment for each aspect.
    """
    plt.figure(figsize=(10, 6))
    plt.bar(df['Aspect'], df['Average Sentiment'], color='skyblue')
    plt.xlabel('Aspect')
    plt.ylabel('Average Sentiment')
    plt.title('Average Sentiment for Each Aspect')
    plt.xticks(rotation=45, ha='right')
    plt.tight_layout()
    plt.show()

# Plot the results
plot_aspect_sentiments(aspect_sentiment_df)

# Load the dataset
df = pd.read_csv('Online Product Reviews Analysis Customer Feedback.csv')
print(df.head())

# Check the column names in your dataset
print(df.columns)

# Replace 'review_text' with the actual column name containing reviews
summary = 'reviewText' # Example: Assuming the column is named 'reviews.text'
assert summary in df.columns, f"Column '{summary}' not found in dataset"

# Initialize a dictionary to store aspect sentiments
aspect_sentiments = defaultdict(list)

# Process each review
for index, row in df.iterrows(): # Iterate over DataFrame rows
    review = row[summary]
    if isinstance(review, str): # Check if the review is a string
        aspects = extract_aspects(review)
        sentiment = analyze_sentiment(review)

        for aspect in aspects:
            aspect_sentiments[aspect].append(sentiment)
    else:
        print(f"Skipping non-string review at index {index}")

# Create a DataFrame for average sentiment per aspect
aspect_sentiment_df = pd.DataFrame({
    'Aspect': [aspect for aspect in aspect_sentiments],
    'Average Sentiment': [sum(sentiments) / len(sentiments) for sentiments in aspect_sentiments.values()]
})

# Display results
print(aspect_sentiment_df)

def plot_aspect_sentiments(df):
    """
    Plot the average sentiment for each aspect.
    """
    # Escape potential mathtext characters in 'Aspect' column
    df['Aspect'] = df['Aspect'].apply(lambda x: x.replace('$', '\\$').replace('@', '\\@'))

    plt.figure(figsize=(12, 8))
    plt.bar(df['Aspect'], df['Average Sentiment'], color='skyblue')
    plt.xlabel('Aspect')
    plt.ylabel('Average Sentiment')
    plt.title('Average Sentiment for Each Aspect')
    plt.xticks(rotation=45, ha='right')
    plt.tight_layout()
    plt.show()

# Plot the results
plot_aspect_sentiments(aspect_sentiment_df)